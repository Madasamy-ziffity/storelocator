(function(){"use strict";var e={};e.p="bundles/emizentechplugin/",window?.__sw__?.assetPath&&(e.p=window.__sw__.assetPath+"/bundles/emizentechplugin/"),function(){let{Component:e,Mixin:t}=Shopware,{Criteria:n}=Shopware.Data;e.register("emizen-module-list",{template:'{% block emizen_module_list %}\n    <sw-page>\n        {% block emizen_module_smart_bar_header %}\n            <template #smart-bar-header>\n                {% block emizen_module_list_smart_bar_header_title %}\n                    <h2>\n                        {% block emizen_module_list_smart_bar_header_title_text %}\n                            {#{{ $tc(\'sw-settings.index.title\') }}#}\n                            <sw-icon name="small-arrow-medium-right" small></sw-icon>\n                            {{ $t(\'emizen-module.general.mainMenuItemList\') }}\n                        {% endblock %}\n                        {% block emizen_module_list_smart_bar_header_amount %}\n                            <span v-if="total" class="sw-page__smart-bar-amount">\n                                ({{total}})\n                            </span>\n                        {% endblock %}\n                    </h2>\n                {% endblock %}\n\n\n            </template>\n        {% endblock %}\n        <template #smart-bar-actions>\n            {% block emizen_module_smart_bar_header_add_button %}\n              <div class="sw-tooltip--wrapper"><a href="#/emizen/module/create" class="emizen-module-list__button-create sw-button sw-button--primary"><span class="sw-button__content">{{ $t(\'emizen-module.general.addButton\') }}</span></a></div>\n            {% endblock %}\n        </template>\n        <template #content>\n            <sw-data-grid\n                    :dataSource="items"\n                    :columns="columns"\n                    :isLoading="isLoading"\n            >\n                <template #actions="{ item }">\n                    <sw-button @click="onEdit(item)">\n                        <sw-icon name="regular-file-edit"></sw-icon>\n                    </sw-button>\n                    <sw-button @click="onDelete(item)">\n                        <sw-icon name="regular-delete-row"></sw-icon>\n                    </sw-button>\n                </template>\n            </sw-data-grid>\n            \n            {#<sw-modal\n                    v-if="showDeleteModal"\n                    title="Confirm Deletion"\n                    @modal-close="showDeleteModal = false"\n            >\n                <template #default>\n                    <p>Are you sure you want to delete this item?</p>\n                </template>\n                <template #footer>\n                    <sw-button variant="primary" @click="confirmDelete">Yes, delete</sw-button>\n                    <sw-button variant="secondary" @click="showDeleteModal = false">Cancel</sw-button>\n                </template>\n            </sw-modal>#}\n            {#<sw-entity-listing\n                    :items="emizenModuleCollection"\n                    :repository="repository"\n                    :showSelection="false"\n                    :columns="columns">\n                <template slot="column-city" slot-scope="{ item }">\n                    {{item.city}}\n                </template>\n                <template slot="column-lat" slot-scope="{ item }">\n                    {{item.lat}}\n                </template>\n                <template slot="column-long" slot-scope="{ item }">\n                    {{item.long}}\n                </template>\n                </sw-entity-listing>#}\n        </template>\n\n        <sw-card title="Store Locator Form">\n            <sw-text-field\n                    v-model:value="form.city"\n                    label="City"\n                    placeholder="Enter city"\n                    :error="formErrors.city"\n                    required\n            />\n            <sw-text-field\n                    v-model:value="form.lat"\n                    label="Latitude"\n                    placeholder="Enter latitude"\n                    :error="formErrors.lat"\n                    required\n            />\n            <sw-text-field\n                    v-model:value="form.long"\n                    label="Longitude"\n                    placeholder="Enter longitude"\n                    :error="formErrors.long"\n                    required\n            />\n            <sw-button @click="onSave">Save</sw-button>\n        </sw-card>\n\n        {#<template #content>\n            {% block emizen_module_list_content %}\n                <div class="emizen-module-list__content">\n                    {% block emizen_module_list_grid %}\n                        <sw-entity-listing>\n                            {% block emizen_module_list_grid_columns %}\n                                {% block sw_product_list_grid_columns_name_preview %}\n                                    <template #preview-firstName="{ item, compact }">\n                                        <sw-avatar\n                                                :size="compact ? \'32px\' : \'48px\'"\n                                                :source-context="item"\n                                                :city="item.city"\n                                                :lat="item.lat"\n                                        />\n                                    </template>\n                                {% endblock %}\n\n                            {% block emizen_module_list_grid_columns_name %}\n                                <template #column-city="{ item, compact, isInlineEdit }">\n                                    {% block emizen_module_list_grid_inline_edit_name %}\n                                        <template v-if="isInlineEdit">\n                                            {% block emizen_module_list_grid_inline_edit_city %}\n                                                <sw-text-field\n                                                        v-model:value="item.city"\n                                                        name="sw-field--item-city"\n                                                        class="sw-customer-list__inline-edit-city"\n                                                        :size="compact ? \'small\' : \'default\'"\n                                                />\n                                            {% endblock %}\n                                        </template>\n                                    {% endblock %}\n                                </template>\n                            {% endblock %}\n                            {% endblock %}\n                        </sw-entity-listing>\n                    {% endblock %}\n                </div>\n            {% endblock %}\n        </template>#}\n    </sw-page>\n{% endblock %}',inject:["repositoryFactory"],mixins:[t.getByName("notification")],metaInfo(){return{title:this.$createTitle()}},data(){return{repository:null,items:[],isLoading:!0,showDeleteModal:!1,itemToDelete:null,columns:[{property:"city",label:"City",align:"left"},{property:"lat",label:"Latitude",align:"left"},{property:"long",label:"Longitude",align:"left"},{property:"actions",label:"Actions",align:"center",useCustomRender:!0}]}},created(){this.repository=this.repositoryFactory.create("storelocator"),this.loadItems()},methods:{loadItems(){this.repository.search(new n,Shopware.Context.api).then(e=>{this.items=e,this.total=e.total,this.isLoading=!1})},onDelete(e){this.repository.delete(e.id,Shopware.Context.api).then(()=>{this.loadItems()})},onEdit(e){this.$router.push({name:"emizen.module.edit",params:{id:e.id}})}}});let{Component:o,Mixin:i}=Shopware;o.register("emizen-module-create",{template:'{%  block emizen_module_create %}\n    <sw-page class="emizen-module-create">\n        {% block emizen_module_create_header %}\n            <template #smart-bar-header>\n                <h2>New Store Locator</h2>\n            </template>\n        {% endblock %}\n        {% block emizen_module_create_actions %}\n            <template #smart-bar-actions>\n                <sw-button-process\n                        class="store-locator-create__save-action"\n                        :is-loading="isLoading"\n                        :disabled="isLoading"\n                        :process-success="isSaveSuccessful"\n                        variant="primary"\n                        @update:process-success="saveFinish"\n                        @click.prevent="onSave"\n                >\n                    {{ $t(\'emizen-module.general.buttonSave\') }}\n                </sw-button-process>\n            </template>\n        {% endblock %}\n\n        {% block emizen_module_create_content %}\n\n        <template #content>\n            <sw-card-view>\n                <sw-card title="Store Locator Form">\n                    <sw-container columns="1fr">\n                        <sw-text-field\n                                v-model:value="form.city"\n                                label="City"\n                                placeholder="Enter city"\n                                :error="formErrors.city"\n                        >\n\n                        </sw-text-field>\n                        <sw-text-field\n                                v-model:value="form.lat"\n                                label="Latitude"\n                                placeholder="Enter latitude"\n                                :error="formErrors.lat"\n                        >\n\n                        </sw-text-field>\n                        <sw-text-field\n                                v-model:value="form.long"\n                                label="Longitude"\n                                placeholder="Enter longitude"\n                                :error="formErrors.long"\n                        >\n\n                        </sw-text-field>\n                    </sw-container>\n                </sw-card>\n            </sw-card-view>\n        </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n',inject:["repositoryFactory"],mixins:[i.getByName("notification")],computed:{storelocatorRepository(){return this.repositoryFactory.create("storelocator")}},data(){return{form:{city:"",lat:"",long:""},formErrors:{city:null,lat:null,long:null}}},methods:{validateForm(){return this.formErrors.city=this.form.city?null:"City is required",this.formErrors.lat=this.form.lat?null:"Latitude is required",this.formErrors.long=this.form.long?null:"Longitude is required",!this.formErrors.city&&!this.formErrors.lat&&!this.formErrors.long},async checkForDuplicateRecord(){let e=new Shopware.Data.Criteria;return e.addFilter(Shopware.Data.Criteria.equals("city",this.form.city)),(await this.storelocatorRepository.search(e,Shopware.Context.api)).total>0},async onSave(){if(this.validateForm()){if(await this.checkForDuplicateRecord()){this.isLoading=!1,this.formErrors.city="Duplicate record found";return}let e=this.storelocatorRepository.create();e.city=this.form.city,e.lat=this.form.lat,e.long=this.form.long;try{await this.storelocatorRepository.save(e,Shopware.Context.api),this.createNotificationSuccess({title:"Success",message:"Store locator details saved successfully."}),this.$router.push({name:"emizen.module.list"})}catch(e){this.createNotificationError({title:"Error",message:e})}}}}});let{Component:l,Mixin:r}=Shopware;l.register("emizen-module-edit",{template:'{%  block emizen_module_edit %}\n    <sw-page class="emizen-module-edit">\n        {% block emizen_module_edit_header %}\n            <template #smart-bar-header>\n                <h2>New Store Locator</h2>\n            </template>\n        {% endblock %}\n        {% block emizen_module_edit_actions %}\n            <template #smart-bar-actions>\n                <sw-button-process\n                        class="store-locator-update__save-action"\n                        :is-loading="isLoading"\n                        :disabled="isLoading"\n                        :process-success="isSaveSuccessful"\n                        variant="primary"\n                        @update:process-success="saveFinish"\n                        @click.prevent="onUpdate"\n                >\n                    {{ $t(\'emizen-module.general.buttonUpdate\') }}\n                </sw-button-process>\n            </template>\n        {% endblock %}\n\n        {% block emizen_module_create_content %}\n\n            <template #content>\n                <sw-card-view>\n                    <sw-card title="Store Locator Form">\n                        <sw-container columns="1fr">\n                            <sw-text-field\n                                    v-model:value="form.city"\n                                    label="City"\n                                    placeholder="Enter city"\n                                    :error="formErrors.city"\n                            >\n\n                            </sw-text-field>\n                            <sw-text-field\n                                    v-model:value="form.lat"\n                                    label="Latitude"\n                                    placeholder="Enter latitude"\n                                    :error="formErrors.lat"\n                            >\n\n                            </sw-text-field>\n                            <sw-text-field\n                                    v-model:value="form.long"\n                                    label="Longitude"\n                                    placeholder="Enter longitude"\n                                    :error="formErrors.long"\n                            >\n\n                            </sw-text-field>\n                        </sw-container>\n                    </sw-card>\n                </sw-card-view>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n',inject:["repositoryFactory"],mixins:[r.getByName("notification")],computed:{storelocatorRepository(){return this.repositoryFactory.create("storelocator")}},data(){return{form:{city:"",lat:"",long:""},formErrors:{city:null,lat:null,long:null}}},created(){this.loadEntity()},methods:{loadEntity(){this.repositoryFactory.create("storelocator").get(this.$route.params.id,Shopware.Context.api).then(e=>{this.form.city=e.city,this.form.lat=e.lat,this.form.long=e.long})},validateForm(){return this.formErrors.city=this.form.city?null:"City is required",this.formErrors.lat=this.form.lat?null:"Latitude is required",this.formErrors.long=this.form.long?null:"Longitude is required",!this.formErrors.city&&!this.formErrors.lat&&!this.formErrors.long},async onUpdate(){if(this.validateForm()){let e=this.repositoryFactory.create("storelocator");e.get(this.$route.params.id,Shopware.Context.api).then(t=>{t.city=this.form.city,t.lat=this.form.lat,t.long=this.form.long,e.save(t,Shopware.Context.api).then(()=>{this.$router.push({name:"emizen.module.list"}),this.createNotificationSuccess({title:"Success",message:"Store locator details updated successfully."})}).catch(e=>{})})}}}});var a=JSON.parse('{"emizen-module":{"general":{"mainMenuItemList":"Store Locator Module","descriptionTextModule":"Store Locator module`","addButton":"Add Store Locator","buttonSave":"Save","buttonUpdate":"Update","formTitle":"Store Locator","cityLabel":"City","addressLabel":"Address"},"list":{"titleColumn":"Title","descColumn":"Description","titleSaveSuccess":"Success","messageSaveSuccess":"Details updated successfully"}}}'),s=JSON.parse('{"emizen-module":{"general":{"mainMenuItemList":"Emizentech-Modul","descriptionTextModule":"Emizentech-Modul"},"list":{"titleColumn":"Titel","descColumn":"Beschreibung","titleSaveSuccess":"Erfolg","messageSaveSuccess":"Einzelheiten erfolgreich aktualisiert"}}}');let{Module:c}=Shopware;c.register("emizen-module",{type:"plugin",title:"emizen-module.general.mainMenuItemList",description:"emizen-module .general.descriptionTextModule",snippets:{"en-GB":a,"de-De":s},routes:{list:{component:"emizen-module-list",path:"list",meta:{parentPath:"sw-catalogue.index"}},create:{component:"emizen-module-create",path:"create",meta:{parentPath:"emizen.module.list"}},edit:{component:"emizen-module-edit",path:"edit/:id",meta:{parentPath:"emizen.module.list"}}},navigation:[{label:"emizen-module.general.mainMenuItemList",color:"#ff3d58",path:"emizen.module.list",icon:"default-action-settings",parent:"sw-catalogue",position:1100}]});let{Criteria:d}=Shopware.Data;Shopware.Component.override("sw-sales-channel-detail-base",{template:'{% block sw_sales_channel_detail_base_general_input_countries %}\n    {% parent %}\n    <div class="sw-sales-channel-detail-city">\n        <label for="city-dropdown">City</label>\n        <select id="city-dropdown" v-model="selectedCity" @change="onChangeCityDropdown($event.target.value)">\n            <option v-for="city in cities" :key="city.id" :value="city.id">{{ city.city }}</option>\n        </select>\n    </div>\n{% endblock %}',inject:["repositoryFactory"],data(){return{cities:[],selectedCity:null,storelocatorRepository:null}},created(){this.storelocatorRepository=this.repositoryFactory.create("storelocator"),this.fetchCities(),this.loadSelectedCity()},methods:{fetchCities(){this.cities=[],this.storelocatorRepository.search(new d,Shopware.Context.api).then(e=>{this.cities=e})},loadSelectedCity(){this.salesChannel.storelocatorId&&(this.selectedCity=this.salesChannel.storelocatorId)},onChangeCityDropdown(e){this.selectedCity=e,this.salesChannel.storelocatorId=this.selectedCity}}});let{Criteria:m}=Shopware.Data;Shopware.Component.override("sw-sales-channel-detail",{template:'{% block sw_sales_channel_detail_base_general_input_countries %}\n    {% parent %}\n    <div class="sw-sales-channel-detail-city">\n        <label for="city-dropdown">City</label>\n        <select id="city-dropdown" v-model="selectedCity" @change="onChangeCityDropdownPage($event.target.value)">\n            <option v-for="city in cities" :key="city.id" :value="city.id">{{ city.city }}</option>\n        </select>\n    </div>\n{% endblock %}',inject:["repositoryFactory"],data(){return{selectedCity:null,cities:[]}},methods:{onSave(){var e=this.salesChannel.storelocatorId;let t=this.repositoryFactory.create("sales_channel");t.get(this.$route.params.id,Shopware.Context.api).then(n=>{n.storelocator_id=e,t.save(n,Shopware.Context.api).then(()=>{}).catch(e=>{})}),this.$super("onSave")}}})}()})();