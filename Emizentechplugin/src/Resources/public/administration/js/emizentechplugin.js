(function(){var e={700:function(){},859:function(e,t,o){var r=o(700);r.__esModule&&(r=r.default),"string"==typeof r&&(r=[[e.id,r,""]]),r.locals&&(e.exports=r.locals),o(346).Z("6c87cbce",r,!0,{})},346:function(e,t,o){"use strict";function r(e,t){for(var o=[],r={},n=0;n<t.length;n++){var s=t[n],i=s[0],a={id:e+":"+n,css:s[1],media:s[2],sourceMap:s[3]};r[i]?r[i].parts.push(a):o.push(r[i]={id:i,parts:[a]})}return o}o.d(t,{Z:function(){return h}});var n="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!n)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},i=n&&(document.head||document.getElementsByTagName("head")[0]),a=null,l=0,c=!1,d=function(){},m=null,u="data-vue-ssr-id",p="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function h(e,t,o,n){c=o,m=n||{};var i=r(e,t);return y(i),function(t){for(var o=[],n=0;n<i.length;n++){var a=s[i[n].id];a.refs--,o.push(a)}t?y(i=r(e,t)):i=[];for(var n=0;n<o.length;n++){var a=o[n];if(0===a.refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete s[a.id]}}}}function y(e){for(var t=0;t<e.length;t++){var o=e[t],r=s[o.id];if(r){r.refs++;for(var n=0;n<r.parts.length;n++)r.parts[n](o.parts[n]);for(;n<o.parts.length;n++)r.parts.push(v(o.parts[n]));r.parts.length>o.parts.length&&(r.parts.length=o.parts.length)}else{for(var i=[],n=0;n<o.parts.length;n++)i.push(v(o.parts[n]));s[o.id]={id:o.id,refs:1,parts:i}}}}function f(){var e=document.createElement("style");return e.type="text/css",i.appendChild(e),e}function v(e){var t,o,r=document.querySelector("style["+u+'~="'+e.id+'"]');if(r){if(c)return d;r.parentNode.removeChild(r)}if(p){var n=l++;t=b.bind(null,r=a||(a=f()),n,!1),o=b.bind(null,r,n,!0)}else t=_.bind(null,r=f()),o=function(){r.parentNode.removeChild(r)};return t(e),function(r){r?(r.css!==e.css||r.media!==e.media||r.sourceMap!==e.sourceMap)&&t(e=r):o()}}var w=function(){var e=[];return function(t,o){return e[t]=o,e.filter(Boolean).join("\n")}}();function b(e,t,o,r){var n=o?"":r.css;if(e.styleSheet)e.styleSheet.cssText=w(t,n);else{var s=document.createTextNode(n),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(s,i[t]):e.appendChild(s)}}function _(e,t){var o=t.css,r=t.media,n=t.sourceMap;if(r&&e.setAttribute("media",r),m.ssrId&&e.setAttribute(u,t.id),n&&(o+="\n/*# sourceURL="+n.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}}},t={};function o(r){var n=t[r];if(void 0!==n)return n.exports;var s=t[r]={id:r,exports:{}};return e[r](s,s.exports,o),s.exports}o.d=function(e,t){for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="bundles/emizentechplugin/",window?.__sw__?.assetPath&&(o.p=window.__sw__.assetPath+"/bundles/emizentechplugin/"),function(){"use strict";let{Component:e,Mixin:t}=Shopware,{Criteria:r}=Shopware.Data;e.register("emizen-module-list",{template:'{% block emizen_module_list %}\n    <sw-page>\n        {% block emizen_module_smart_bar_header %}\n            <template #smart-bar-header>\n                {% block emizen_module_list_smart_bar_header_title %}\n                    <h2>\n                        {% block emizen_module_list_smart_bar_header_title_text %}\n                            {#{{ $tc(\'sw-settings.index.title\') }}#}\n                            <sw-icon name="small-arrow-medium-right" small></sw-icon>\n                            {{ $t(\'emizen-module.general.mainMenuItemList\') }}\n                        {% endblock %}\n                        {% block emizen_module_list_smart_bar_header_amount %}\n                            <span v-if="total" class="sw-page__smart-bar-amount">\n                                ({{total}})\n                            </span>\n                        {% endblock %}\n                    </h2>\n                {% endblock %}\n\n\n            </template>\n        {% endblock %}\n        <template #smart-bar-actions>\n            {% block emizen_module_smart_bar_header_add_button %}\n              <div class="sw-tooltip--wrapper"><a href="#/emizen/module/create" class="emizen-module-list__button-create sw-button sw-button--primary"><span class="sw-button__content">{{ $t(\'emizen-module.general.addButton\') }}</span></a></div>\n            {% endblock %}\n        </template>\n        <template #content>\n            <sw-data-grid\n                    :dataSource="items"\n                    :columns="columns"\n                    :isLoading="isLoading"\n            >\n                <template #actions="{ item }">\n                    <sw-button @click="onEdit(item)">\n                        <sw-icon name="regular-file-edit"></sw-icon>\n                    </sw-button>\n                    <sw-button @click="onDelete(item)">\n                        <sw-icon name="regular-delete-row"></sw-icon>\n                    </sw-button>\n                </template>\n            </sw-data-grid>\n            \n            {#<sw-modal\n                    v-if="showDeleteModal"\n                    title="Confirm Deletion"\n                    @modal-close="showDeleteModal = false"\n            >\n                <template #default>\n                    <p>Are you sure you want to delete this item?</p>\n                </template>\n                <template #footer>\n                    <sw-button variant="primary" @click="confirmDelete">Yes, delete</sw-button>\n                    <sw-button variant="secondary" @click="showDeleteModal = false">Cancel</sw-button>\n                </template>\n            </sw-modal>#}\n            {#<sw-entity-listing\n                    :items="emizenModuleCollection"\n                    :repository="repository"\n                    :showSelection="false"\n                    :columns="columns">\n                <template slot="column-city" slot-scope="{ item }">\n                    {{item.city}}\n                </template>\n                <template slot="column-lat" slot-scope="{ item }">\n                    {{item.lat}}\n                </template>\n                <template slot="column-long" slot-scope="{ item }">\n                    {{item.long}}\n                </template>\n                </sw-entity-listing>#}\n        </template>\n\n        <sw-card title="Store Locator Form">\n            <sw-text-field\n                    v-model:value="form.city"\n                    label="City"\n                    placeholder="Enter city"\n                    :error="formErrors.city"\n                    required\n            />\n            <sw-text-field\n                    v-model:value="form.lat"\n                    label="Latitude"\n                    placeholder="Enter latitude"\n                    :error="formErrors.lat"\n                    required\n            />\n            <sw-text-field\n                    v-model:value="form.long"\n                    label="Longitude"\n                    placeholder="Enter longitude"\n                    :error="formErrors.long"\n                    required\n            />\n            <sw-button @click="onSave">Save</sw-button>\n        </sw-card>\n\n        {#<template #content>\n            {% block emizen_module_list_content %}\n                <div class="emizen-module-list__content">\n                    {% block emizen_module_list_grid %}\n                        <sw-entity-listing>\n                            {% block emizen_module_list_grid_columns %}\n                                {% block sw_product_list_grid_columns_name_preview %}\n                                    <template #preview-firstName="{ item, compact }">\n                                        <sw-avatar\n                                                :size="compact ? \'32px\' : \'48px\'"\n                                                :source-context="item"\n                                                :city="item.city"\n                                                :lat="item.lat"\n                                        />\n                                    </template>\n                                {% endblock %}\n\n                            {% block emizen_module_list_grid_columns_name %}\n                                <template #column-city="{ item, compact, isInlineEdit }">\n                                    {% block emizen_module_list_grid_inline_edit_name %}\n                                        <template v-if="isInlineEdit">\n                                            {% block emizen_module_list_grid_inline_edit_city %}\n                                                <sw-text-field\n                                                        v-model:value="item.city"\n                                                        name="sw-field--item-city"\n                                                        class="sw-customer-list__inline-edit-city"\n                                                        :size="compact ? \'small\' : \'default\'"\n                                                />\n                                            {% endblock %}\n                                        </template>\n                                    {% endblock %}\n                                </template>\n                            {% endblock %}\n                            {% endblock %}\n                        </sw-entity-listing>\n                    {% endblock %}\n                </div>\n            {% endblock %}\n        </template>#}\n    </sw-page>\n{% endblock %}',inject:["repositoryFactory"],mixins:[t.getByName("notification")],metaInfo(){return{title:this.$createTitle()}},data(){return{repository:null,items:[],isLoading:!0,showDeleteModal:!1,itemToDelete:null,columns:[{property:"city",label:"City",align:"left"},{property:"lat",label:"Latitude",align:"left"},{property:"long",label:"Longitude",align:"left"},{property:"actions",label:"Actions",align:"center",useCustomRender:!0}]}},created(){this.repository=this.repositoryFactory.create("storelocator"),this.loadItems()},methods:{loadItems(){this.repository.search(new r,Shopware.Context.api).then(e=>{this.items=e,this.total=e.total,this.isLoading=!1})},onDelete(e){this.repository.delete(e.id,Shopware.Context.api).then(()=>{this.loadItems()})},onEdit(e){this.$router.push({name:"emizen.module.edit",params:{id:e.id}})}}});let{Component:n,Mixin:s}=Shopware;n.register("emizen-module-create",{template:'{%  block emizen_module_create %}\n    <sw-page class="emizen-module-create">\n        {% block emizen_module_create_header %}\n            <template #smart-bar-header>\n                <h2>New Store Locator</h2>\n            </template>\n        {% endblock %}\n        {% block emizen_module_create_actions %}\n            <template #smart-bar-actions>\n                <sw-button-process\n                        class="store-locator-create__save-action"\n                        :is-loading="isLoading"\n                        :disabled="isLoading"\n                        :process-success="isSaveSuccessful"\n                        variant="primary"\n                        @update:process-success="saveFinish"\n                        @click.prevent="onSave"\n                >\n                    {{ $t(\'emizen-module.general.buttonSave\') }}\n                </sw-button-process>\n            </template>\n        {% endblock %}\n\n        {% block emizen_module_create_content %}\n\n        <template #content>\n            <sw-card-view>\n                <sw-card title="Store Locator Form">\n                    <sw-container columns="1fr">\n                        <sw-text-field\n                                v-model:value="form.city"\n                                label="City"\n                                placeholder="Enter city"\n                                :error="formErrors.city"\n                        >\n\n                        </sw-text-field>\n                        <sw-text-field\n                                v-model:value="form.lat"\n                                label="Latitude"\n                                placeholder="Enter latitude"\n                                :error="formErrors.lat"\n                        >\n\n                        </sw-text-field>\n                        <sw-text-field\n                                v-model:value="form.long"\n                                label="Longitude"\n                                placeholder="Enter longitude"\n                                :error="formErrors.long"\n                        >\n\n                        </sw-text-field>\n                    </sw-container>\n                </sw-card>\n            </sw-card-view>\n        </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n',inject:["repositoryFactory"],mixins:[s.getByName("notification")],computed:{storelocatorRepository(){return this.repositoryFactory.create("storelocator")}},data(){return{form:{city:"",lat:"",long:""},formErrors:{city:null,lat:null,long:null}}},methods:{validateForm(){return this.formErrors.city=this.form.city?null:"City is required",this.formErrors.lat=this.form.lat?null:"Latitude is required",this.formErrors.long=this.form.long?null:"Longitude is required",!this.formErrors.city&&!this.formErrors.lat&&!this.formErrors.long},async checkForDuplicateRecord(){let e=new Shopware.Data.Criteria;return e.addFilter(Shopware.Data.Criteria.equals("city",this.form.city)),(await this.storelocatorRepository.search(e,Shopware.Context.api)).total>0},async onSave(){if(this.validateForm()){if(await this.checkForDuplicateRecord()){this.isLoading=!1,this.formErrors.city="Duplicate record found";return}let e=this.storelocatorRepository.create();e.city=this.form.city,e.lat=this.form.lat,e.long=this.form.long;try{await this.storelocatorRepository.save(e,Shopware.Context.api),this.createNotificationSuccess({title:"Success",message:"Store locator details saved successfully."}),this.$router.push({name:"emizen.module.list"})}catch(e){this.createNotificationError({title:"Error",message:e})}}}}});let{Component:i,Mixin:a}=Shopware;i.register("emizen-module-edit",{template:'{%  block emizen_module_edit %}\n    <sw-page class="emizen-module-edit">\n        {% block emizen_module_edit_header %}\n            <template #smart-bar-header>\n                <h2>New Store Locator</h2>\n            </template>\n        {% endblock %}\n        {% block emizen_module_edit_actions %}\n            <template #smart-bar-actions>\n                <sw-button-process\n                        class="store-locator-update__save-action"\n                        :is-loading="isLoading"\n                        :disabled="isLoading"\n                        :process-success="isSaveSuccessful"\n                        variant="primary"\n                        @update:process-success="saveFinish"\n                        @click.prevent="onUpdate"\n                >\n                    {{ $t(\'emizen-module.general.buttonUpdate\') }}\n                </sw-button-process>\n            </template>\n        {% endblock %}\n\n        {% block emizen_module_create_content %}\n\n            <template #content>\n                <sw-card-view>\n                    <sw-card title="Store Locator Form">\n                        <sw-container columns="1fr">\n                            <sw-text-field\n                                    v-model:value="form.city"\n                                    label="City"\n                                    placeholder="Enter city"\n                                    :error="formErrors.city"\n                            >\n\n                            </sw-text-field>\n                            <sw-text-field\n                                    v-model:value="form.lat"\n                                    label="Latitude"\n                                    placeholder="Enter latitude"\n                                    :error="formErrors.lat"\n                            >\n\n                            </sw-text-field>\n                            <sw-text-field\n                                    v-model:value="form.long"\n                                    label="Longitude"\n                                    placeholder="Enter longitude"\n                                    :error="formErrors.long"\n                            >\n\n                            </sw-text-field>\n                        </sw-container>\n                    </sw-card>\n                </sw-card-view>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n',inject:["repositoryFactory"],mixins:[a.getByName("notification")],computed:{storelocatorRepository(){return this.repositoryFactory.create("storelocator")}},data(){return{form:{city:"",lat:"",long:""},formErrors:{city:null,lat:null,long:null}}},created(){this.loadEntity()},methods:{loadEntity(){this.repositoryFactory.create("storelocator").get(this.$route.params.id,Shopware.Context.api).then(e=>{this.form.city=e.city,this.form.lat=e.lat,this.form.long=e.long})},validateForm(){return this.formErrors.city=this.form.city?null:"City is required",this.formErrors.lat=this.form.lat?null:"Latitude is required",this.formErrors.long=this.form.long?null:"Longitude is required",!this.formErrors.city&&!this.formErrors.lat&&!this.formErrors.long},async onUpdate(){if(this.validateForm()){let e=this.repositoryFactory.create("storelocator");e.get(this.$route.params.id,Shopware.Context.api).then(t=>{t.city=this.form.city,t.lat=this.form.lat,t.long=this.form.long,e.save(t,Shopware.Context.api).then(()=>{this.$router.push({name:"emizen.module.list"}),this.createNotificationSuccess({title:"Success",message:"Store locator details updated successfully."})}).catch(e=>{})})}}}});var l=JSON.parse('{"emizen-module":{"general":{"mainMenuItemList":"Store Locator Module","descriptionTextModule":"Store Locator module`","addButton":"Add Store Locator","buttonSave":"Save","buttonUpdate":"Update","formTitle":"Store Locator","cityLabel":"City","addressLabel":"Address"},"list":{"titleColumn":"Title","descColumn":"Description","titleSaveSuccess":"Success","messageSaveSuccess":"Details updated successfully"}}}'),c=JSON.parse('{"emizen-module":{"general":{"mainMenuItemList":"Emizentech-Modul","descriptionTextModule":"Emizentech-Modul"},"list":{"titleColumn":"Titel","descColumn":"Beschreibung","titleSaveSuccess":"Erfolg","messageSaveSuccess":"Einzelheiten erfolgreich aktualisiert"}}}');let{Module:d}=Shopware;d.register("emizen-module",{type:"plugin",title:"emizen-module.general.mainMenuItemList",description:"emizen-module .general.descriptionTextModule",snippets:{"en-GB":l,"de-De":c},routes:{list:{component:"emizen-module-list",path:"list",meta:{parentPath:"sw-catalogue.index"}},create:{component:"emizen-module-create",path:"create",meta:{parentPath:"emizen.module.list"}},edit:{component:"emizen-module-edit",path:"edit/:id",meta:{parentPath:"emizen.module.list"}}},navigation:[{label:"emizen-module.general.mainMenuItemList",color:"#ff3d58",path:"emizen.module.list",icon:"default-action-settings",parent:"sw-catalogue",position:1100}]});let{Component:m,Mixin:u}=Shopware,{Criteria:p}=Shopware.Data;m.register("store-inventory-list",{template:'{% block store_inventory_list %}\n<sw-page>\n    {% block store_inventory_smart_bar_header %}\n        <template #smart-bar-header>\n            {% block store_inventory_list_smart_bar_header_title %}\n                <h2>\n                    {% block store_inventory_list_smart_bar_header_title_text %}\n                        <sw-icon name="small-arrow-medium-right" small></sw-icon>\n                        Store Inventory\n                    {% endblock %}\n                    {% block store_inventory_list_smart_bar_header_amount %}\n                        <span v-if="total" class="sw-page__smart-bar-amount">\n                                ({{total}})\n                            </span>\n                    {% endblock %}\n                </h2>\n            {% endblock %}\n        </template>\n    {% endblock %}\n    <template #smart-bar-actions>\n        {% block store_inventory_smart_bar_header_add_button %}\n            <div class="sw-tooltip--wrapper"><a href="#/store/inventory/create" class="store_inventory-list__button-create sw-button sw-button--primary"><span class="sw-button__content">Add</span></a></div>\n        {% endblock %}\n    </template>\n    <template #content>\n        <sw-data-grid\n                :dataSource="items"\n                :columns="columns"\n                :isLoading="isLoading"\n        >\n            <template #actions="{ item }">\n                <sw-button @click="onEdit(item)">\n                    <sw-icon name="regular-file-edit"></sw-icon>\n                </sw-button>\n                <sw-button @click="onDelete(item)">\n                    <sw-icon name="regular-delete-row"></sw-icon>\n                </sw-button>\n            </template>\n        </sw-data-grid>\n    </template>\n</sw-page>\n{% endblock %}',inject:["repositoryFactory"],data(){return{repository:null,items:[],isLoading:!0,showDeleteModal:!1,itemToDelete:null,columns:[{property:"product_number",label:"Product",align:"left"},{property:"city",label:"Store",align:"left"},{property:"stock",label:"Stock",align:"left"},{property:"actions",label:"Actions",align:"center",useCustomRender:!0}]}},created(){this.repository=this.repositoryFactory.create("store_inventory_stock"),this.loadItems()},methods:{loadItems(){this.repository.search(new p,Shopware.Context.api).then(e=>{this.items=e,this.total=e.total,this.isLoading=!1})},onDelete(e){this.repository.delete(e.id,Shopware.Context.api).then(()=>{this.loadItems()})},onEdit(e){this.$router.push({name:"store.inventory.edit",params:{id:e.id}})}}});let{Component:h,Mixin:y}=Shopware,{Criteria:f}=Shopware.Data;h.register("store-inventory-create",{template:'{%  block store_inventory_create %}\n    <sw-page class="store-inventory-create">\n        {% block store_inventory_create_header %}\n            <template #smart-bar-header>\n                <h2>New Store Inventory</h2>\n            </template>\n        {% endblock %}\n        {% block store_inventory_create_actions %}\n            <template #smart-bar-actions>\n                <sw-button-process\n                        class="store-inventory-create__save-action"\n                        :is-loading="isLoading"\n                        :disabled="isLoading"\n                        :process-success="isSaveSuccessful"\n                        variant="primary"\n                        @update:process-success="saveFinish"\n                        @click.prevent="onSave"\n                >\n                    Save\n                </sw-button-process>\n            </template>\n        {% endblock %}\n\n        {% block store_inventory_create_content %}\n\n            <template #content>\n                <sw-card-view>\n                    <sw-card title="Store Inventory Form">\n                        <sw-container columns="1fr">\n                            {#<sw-select-field\n                                    v-model:value="form.product_id"\n                                    label="Product"\n                                    placeholder="Select a product"\n                                    :options="cityOptions"\n                                    :error="formErrors.product_id"\n                                    :searchable="true"\n                            >\n                            </sw-select-field>#}\n\n                            <div class="sw-sales-channel-detail-product">\n                                <label for="product-dropdown">Product</label>\n                                <select id="product-dropdown" v-model="selectedProduct">\n                                    <option v-for="product in products" :key="product.id" :value="product.productNumber">{{ product.productNumber }}</option>\n                                </select>\n                                <span v-if="errors.selectedProduct" class="error-message">{{ errors.selectedProduct }}</span>\n                            </div>\n                            <br>\n                            <div class="sw-sales-channel-detail-city">\n                                <label for="city-dropdown">City</label>\n                                <select id="city-dropdown" v-model="selectedCity">\n                                    <option v-for="city in cities" :key="city.id" :value="city.city">{{ city.city }}</option>\n                                </select>\n                                <span v-if="errors.selectedCity" class="error-message">{{ errors.selectedCity }}</span>\n                            </div>\n                            <br>\n                            <sw-text-field\n                                    v-model:value="form.stock"\n                                    label="Stock"\n                                    placeholder="Enter Stock"\n                                    {#:error="formErrors.stock"#}\n                            >\n\n                            </sw-text-field>\n                            <span v-if="errors.stock" class="error-message">{{ errors.stock }}</span>\n                           {# <sw-text-field\n                                    v-model:value="form.lat"\n                                    label="Latitude"\n                                    placeholder="Enter latitude"\n                                    :error="formErrors.lat"\n                            >\n\n                            </sw-text-field>\n                            <sw-text-field\n                                    v-model:value="form.stock"\n                                    label="Stock"\n                                    placeholder="Enter Stock"\n                                    :error="formErrors.stock"\n                            >\n\n                            </sw-text-field>#}\n                        </sw-container>\n                    </sw-card>\n                </sw-card-view>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}',inject:["repositoryFactory"],mixins:[y.getByName("notification")],computed:{storeinventoryRepository(){return this.repositoryFactory.create("store_inventory_stock")}},data(){return{form:{selectedCity:"",selectedProduct:"",stock:""},errors:{selectedProduct:"",selectedCity:"",stock:""},cities:[],products:[]}},created(){this.storelocatorRepository=this.repositoryFactory.create("storelocator"),this.loadCities(),this.loadProducts()},methods:{loadCities(){this.cities=[],this.storelocatorRepository.search(new f,Shopware.Context.api).then(e=>{this.cities=e})},loadProducts(){this.products=[],this.productdataRepository=this.repositoryFactory.create("product"),this.productdataRepository.search(new f,Shopware.Context.api).then(e=>{this.products=e})},async onSave(){if(this.clearErrors(),this.validateForm()){let e=this.storeinventoryRepository.create();e.product_number=this.selectedProduct,e.city=this.selectedCity,e.stock=this.form.stock;try{await this.storeinventoryRepository.save(e,Shopware.Context.api),this.createNotificationSuccess({title:"Success",message:"Store inventory details saved successfully."}),this.$router.push({name:"store.inventory.list"})}catch(e){this.createNotificationError({title:"Error",message:e})}}},validateForm(){let e=!0;return this.selectedProduct||(this.errors.selectedProduct="Product is required",e=!1),this.selectedCity||(this.errors.selectedCity="City is required",e=!1),this.form.stock||(this.errors.stock="Stock is required",e=!1),e},clearErrors(){this.errors.selectedProduct="",this.errors.selectedCity="",this.errors.stock=""}}});let{Component:v,Mixin:w}=Shopware,{Criteria:b}=Shopware.Data;v.register("store-inventory-edit",{template:'{%  block store_inventory_create %}\n    <sw-page class="store-inventory-create">\n        {% block store_inventory_create_header %}\n            <template #smart-bar-header>\n                <h2>New Store Inventory</h2>\n            </template>\n        {% endblock %}\n        {% block store_inventory_create_actions %}\n            <template #smart-bar-actions>\n                <sw-button-process\n                        class="store-inventory-create__save-action"\n                        :is-loading="isLoading"\n                        :disabled="isLoading"\n                        :process-success="isSaveSuccessful"\n                        variant="primary"\n                        @update:process-success="saveFinish"\n                        @click.prevent="onUpdate"\n                >\n                    Update\n                </sw-button-process>\n            </template>\n        {% endblock %}\n\n        {% block store_inventory_create_content %}\n\n            <template #content>\n                <sw-card-view>\n                    <sw-card title="Store Inventory Form">\n                        <sw-container columns="1fr">\n                            {#<sw-select-field\n                                    v-model:value="form.product_id"\n                                    label="Product"\n                                    placeholder="Select a product"\n                                    :options="cityOptions"\n                                    :error="formErrors.product_id"\n                                    :searchable="true"\n                            >\n                            </sw-select-field>#}\n\n                            <div class="sw-sales-channel-detail-product">\n                                <label for="product-dropdown">Product</label>\n                                <select id="product-dropdown" v-model="selectedProduct">\n                                    <option v-for="product in products" :key="product.id" :value="product.productNumber">{{ product.productNumber }}</option>\n                                </select>\n                                <span v-if="errors.selectedProduct" class="error-message">{{ errors.selectedProduct }}</span>\n                            </div>\n                            <br>\n                            <div class="sw-sales-channel-detail-city">\n                                <label for="city-dropdown">City</label>\n                                <select id="city-dropdown" v-model="selectedCity">\n                                    <option v-for="city in cities" :key="city.id" :value="city.city">{{ city.city }}</option>\n                                </select>\n                                <span v-if="errors.selectedCity" class="error-message">{{ errors.selectedCity }}</span>\n                            </div>\n                            <br>\n                            <sw-text-field\n                                    v-model:value="form.stock"\n                                    label="Stock"\n                                    placeholder="Enter Stock"\n                                    {#:error="formErrors.stock"#}\n                            >\n\n                            </sw-text-field>\n                            <span v-if="errors.stock" class="error-message">{{ errors.stock }}</span>\n                            {# <sw-text-field\n                                    v-model:value="form.lat"\n                                    label="Latitude"\n                                    placeholder="Enter latitude"\n                                    :error="formErrors.lat"\n                            >\n\n                            </sw-text-field>\n                            <sw-text-field\n                                    v-model:value="form.stock"\n                                    label="Stock"\n                                    placeholder="Enter Stock"\n                                    :error="formErrors.stock"\n                            >\n\n                            </sw-text-field>#}\n                        </sw-container>\n                    </sw-card>\n                </sw-card-view>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n',inject:["repositoryFactory"],mixins:[w.getByName("notification")],computed:{storeinventoryRepository(){return this.repositoryFactory.create("store_inventory_stock")}},data(){return{form:{selectedCity:"",selectedProduct:"",stock:""},errors:{selectedProduct:"",selectedCity:"",stock:""},cities:[],products:[]}},created(){this.storelocatorRepository=this.repositoryFactory.create("storelocator"),this.loadCities(),this.loadProducts(),this.loadEntity()},methods:{loadCities(){this.cities=[],this.storelocatorRepository.search(new b,Shopware.Context.api).then(e=>{this.cities=e})},loadProducts(){this.products=[],this.productdataRepository=this.repositoryFactory.create("product"),this.productdataRepository.search(new b,Shopware.Context.api).then(e=>{this.products=e})},loadEntity(){this.repositoryFactory.create("store_inventory_stock").get(this.$route.params.id,Shopware.Context.api).then(e=>{this.selectedProduct=e.product_number,this.selectedCity=e.city,this.form.stock=e.stock})},async onUpdate(){if(this.clearErrors(),this.validateForm()){let e=this.repositoryFactory.create("store_inventory_stock");e.get(this.$route.params.id,Shopware.Context.api).then(t=>{t.product_number=this.selectedProduct,t.city=this.selectedCity,t.stock=this.form.stock,e.save(t,Shopware.Context.api).then(()=>{this.$router.push({name:"store.inventory.list"}),this.createNotificationSuccess({title:"Success",message:"Store inventory details updated successfully."})}).catch(e=>{})})}},validateForm(){let e=!0;return this.selectedProduct||(this.errors.selectedProduct="Product is required",e=!1),this.selectedCity||(this.errors.selectedCity="City is required",e=!1),this.form.stock||(this.errors.stock="Stock is required",e=!1),e},clearErrors(){this.errors.selectedProduct="",this.errors.selectedCity="",this.errors.stock=""}}}),o(859);let{Module:_}=Shopware;_.register("store-inventory",{type:"plugin",title:"Store Inventory",description:"Store Inventory",routes:{list:{component:"store-inventory-list",path:"list",meta:{parentPath:"sw-catalogue.index"}},create:{component:"store-inventory-create",path:"create",meta:{parentPath:"store.inventory.list"}},edit:{component:"store-inventory-edit",path:"edit/:id",meta:{parentPath:"store.inventory.list"}}},navigation:[{label:"Store Inventory",color:"#ff3d58",path:"store.inventory.list",icon:"default-action-settings",parent:"sw-catalogue",position:1110}]})}()})();